<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dynamically shared objects - Adam Pridgen</title><link href="http://deeso.github.io/" rel="alternate"></link><link href="http://deeso.github.io/feeds/adam-pridgen.atom.xml" rel="self"></link><id>http://deeso.github.io/</id><updated>2014-04-12T00:00:00-05:00</updated><entry><title>Using Radare to Enumerate Artifacts in a Java Class File</title><link href="http://deeso.github.io/posts/2014/04/radare-java-artifact-enumeration/" rel="alternate"></link><published>2014-04-12T00:00:00-05:00</published><updated>2014-04-12T00:00:00-05:00</updated><author><name>Adam Pridgen</name></author><id>tag:deeso.github.io,2014-04-12:/posts/2014/04/radare-java-artifact-enumeration/</id><summary type="html">&lt;p&gt;This post explains how to use Radare to examine Java class files.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;0. Introduction&lt;/h2&gt;
&lt;p&gt;In the last post, we explored loading Java class files and performing some of the 
typical operations that one might expect a hex-editor to do.  The tasks shown included:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;loading data from a hexlified string and writing to a file&lt;/li&gt;
&lt;li&gt;direct file manipulation in a ZIP or JAR&lt;/li&gt;
&lt;li&gt;copy and pasting data &lt;/li&gt;
&lt;li&gt;extending the file size&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This post is going to go into alitte more detail about how to perform cursory static analysis of
a class file.  Specifically, the topics are going to cover commands that print the prototypes for a class
file, explore method and field information in the class file metadata, and then dig through the print
out information related to the Constant Pool.  Before getting started, we are going to load up an
example archive, and look at the output from the &lt;strong&gt;java summary&lt;/strong&gt; command.  This command will show a 
broad summary of the class file in question, which breaks down the number of entries in the major 
section of the &lt;strong&gt;Constant Pool&lt;/strong&gt;, &lt;strong&gt;Methods&lt;/strong&gt;, &lt;strong&gt;Fields&lt;/strong&gt;, etc.  This post is intended to be interactive
so that you can learn by example, so be fore-warned it will likely be a little dry.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# use radare to write our binary zip file from a string and then open up the first file entry in the zip file
$ r2 -c &amp;quot;wx 504b0304140000000800dd7c7f44195f7fd7f2020000ef0400003a001c0072657365617263685f646174612f6578706572696d656e742f6465636f6d70696c65722f64756d7065645f6a61725f6465632f632e636c617373555409000361d2395392c43e5375780b000104e803000004e8030000ad52cd4f135110ff3dbadb6dcb0205f9d002f2a5d8166c0501452ac216488ca02628849664b32c0b2ec2962c8b112f26c69b9ebce195c3269ef8484a2209dcfda35ce76df988c2d1cdbe79f37e33f3667ef3e6d7ef9fc7007a311142b38476091d126e49b82da1338232544610401517351188fc28221a41906b4154cbb88e6b5c34c868419d8c56d4cb68431d43209e9861e88c4fae68efb4f4aa662da7a71ddbb4968712972186faab1cf30a37e4952b23446ea014c18c6999ce30297a8abb3108d9c2a2c15035695ac6f3cdb505c37ea52dac1212992e6cdaba3161f28328dab3d57906b6c0202f1a3ac5289b4b4b864d371996ee5f115a361c65cb313618a21725bc58583174e72fa854155da653c51b9b567acddcd0d3cae8f4f840df987fb77dd9306e9d1ac2b96753fda9fed4e038dd4004584e461c8930042425c465a49026d4a4f5348c6edc95d0cbd07291bec472a260af69cef87bdd5877cc8245de1f186aaeea5d28a3affa5d93f1000f19ca9d42f68d668fdab6b645fd8b27f259fee603fc694badce266638f248c6309e50874ccb316c4a511bbfe271b8e76319f7d1c7298c32544c3b9afe764a5bf71f4202f12ccb676950049a31d00a73bea4c57810ed02181f2d92313a35d3ce6817938790f64861682419f441c90fae3d754d526a8ed61c2138770839b90fa588701115bbffc44528eee679dc171a6c5e4a6a1f5d992304e68e20527c245944f92142fbb8b78ddac66dc82e8493800bf1443840d72ec53451f6387aa8e45674d05e769e434025b2a4a711f4c8542621403c24f48c90963ddd3dcedfb7f852218110facfb83385cae4e57eac6151cf45f8008a0b472d6270ee580d0ca93961075373b1f9be5868fd07f9f5a0f405fcbe01edb4eed0ea8ebe74511bed745115ad76118966884454fff4edf5673035f71da179d5f58ed45c6cc73ba006e4d443648a185167d559d7fb5aea3a67b307d9a3a6339f0a952f9e11f0882ea10146f898c79f8c26c73fd04fd6360e04cf014284ff84f8a9a40b84a0aa8b521ac8dee44fd98d3f504b01021e03140000000800dd7c7f44195f7fd7f2020000ef0400003a0018000000000000000000a4810000000072657365617263685f646174612f6578706572696d656e742f6465636f6d70696c65722f64756d7065645f6a61725f6465632f632e636c617373555405000361d2395375780b000104e803000004e8030000504b0506000000000100010080000000660300000000&amp;quot; -w example.zip

[0x00000000]&amp;gt; q

$ r2 zip://example.zip::0
[0x000002af]&amp;gt;

[0x00000312]&amp;gt; java summary
Summary for research_data/experiment/decompiler/dumped_jar_dec/c.class:
        Size 0x0:
        Constants (size: 0x275)Count: 69:
        Methods (size: 0x24e)Count: 4:
        Fields (size: 0x12)Count: 2:
        Attributes (size: 0xa)Count: 1:
        Interfaces (size: 0x2)Count: 0:
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Enumerating Information Method and Field Information in the Class File&lt;/h2&gt;
&lt;p&gt;Method and field information can quickly reveal what the class file does 
by looking at typed fields, typed methods, and imports that the class file relies
on.  This information can be used to assess what a function might be doing,
what datatypes the parameters are, what references are used or methods are called,
and even provide information related to exception handling.  More importantly,
if the objective is to modify the class file, this exploratory information can 
provide the appropriate offsets into the file so that those modifications can 
be made.&lt;/p&gt;
&lt;h3&gt;Java Prototypes&lt;/h3&gt;
&lt;p&gt;In the below example, the second entry in the JAR file list is accessed, and 
successfully recognized as a Java class file.  Rather than attempting to understand
the disassembly, it always best to get the best overview.  Here, what we see 
immediately is that the &lt;strong&gt;s&lt;/strong&gt; class has a &lt;strong&gt;call&lt;/strong&gt; method and then a &lt;strong&gt;tr_func&lt;/strong&gt;.
Both of which are interesting for further information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x000002af&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="n"&gt;prototypes&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sun.misc.BASE64Decoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sun.misc.BASE64Encoder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.NumberFormatException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nd"&gt;@0x0000&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Fields&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
    &lt;span class="nc"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nd"&gt;@0x0287&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nd"&gt;@0x028f&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Methods&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
    &lt;span class="nc"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nd"&gt;@0x0299&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nd"&gt;@0x02c4&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nd"&gt;@0x02fc&lt;/span&gt;
    &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;clinit&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nd"&gt;@0x0395&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x000002af&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Java Method and Field Information&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;java m_info&lt;/strong&gt; and &lt;strong&gt;java f_info&lt;/strong&gt; will dump a summary of structure
and attribute information that is contained in the method or field definition.&lt;/p&gt;
&lt;p&gt;Below the file offset is set to &lt;strong&gt;0x312&lt;/strong&gt;, and then the summary is printed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x000002af]&amp;gt; s 0x312; java m_info s
Method Summary Information:
        File offset: 0x00000299 Access Flags: 1
        Name Index: 24 (&amp;lt;init&amp;gt;)
        Descriptor Index: 19 (()V)
        Access Flags: 0x01 (public)
        Method Attributes Count: 1
        Method Attributes:
Code Attribute information:
   Attribute Offset: 0x000002a1
   Attribute Name Index: 26 (Code)
   Attribute length: 29, Attribute Count: 1
          Max Stack: 1
          Max Locals: 1
          Code Length: 5
          Code At Offset: 0x000002af
Code Attribute Exception table information:
          Exception table length: 0
          Implicit Method Stack Frame: 
Stack Map Frame Information
        Tag Value = 0x00 Name: ImplicitStackFrame
        Offset: 0x00000000
        Local Variable Count = 0x0000
        Stack Items Count = 0x0000
        Local Variables:
        Stack Items:
Code Attribute Attributes information:
          Code Attribute Attributes count: 1
Line Number Table Attribute information:
   Attribute Offset: 0x000002b8
   Attribute Name Index: 27 (LineNumberTable)
   Attribute length: 6
   Line Number Attribute offset: 0x000002c0
   Line Number Attribute start_pc: 0
   Line Number Attribute line_number: 7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, the field information can be printed with the &lt;strong&gt;java f_info s&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x000002af]&amp;gt; java f_info s
Field Summary Information:
        File offset: 0x00000287 Access Flags: 9
        Name Index: 40 (a)
        Descriptor Index: 41 (Z)
        Access Flags: 0x09 (public static)
        Field Attributes Count: 0
        Field Attributes:
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Enumerating References in the Code&lt;/h3&gt;
&lt;p&gt;Currently, the Java class analysis does not annotate the field, method, or call
in the disassembler code.  This issue  due 
to some current development for a new &lt;em&gt;variable analysis&lt;/em&gt; and &lt;em&gt;code analysis&lt;/em&gt; 
data store.  However, it is still possible to print the references that appear
in code using the &lt;strong&gt;java lcr&lt;/strong&gt; command.  &lt;strong&gt;Note&lt;/strong&gt;, prior to listing the code
references, an analysis of all the functions will need to take place using the 
&lt;strong&gt;af&lt;/strong&gt; command.  After the method analysis is complete, the &lt;strong&gt;java lcr&lt;/strong&gt;
will walk the basic blocks in the methods, and determine if it uses an instruction
that has a follow-on reference.  Typically, these instructions are read or write to 
class fields, call methods, or read constant values from the Constant Pool.&lt;/p&gt;
&lt;p&gt;The results of this command will tell the analyst where the &lt;em&gt;address of the 
reference&lt;/em&gt;, &lt;em&gt;operation&lt;/em&gt; (&lt;strong&gt;read&lt;/strong&gt;, &lt;strong&gt;write&lt;/strong&gt;, &lt;strong&gt;call&lt;/strong&gt;), &lt;em&gt;type&lt;/em&gt;, and 
&lt;em&gt;type-specific&lt;/em&gt; information (e.g. &lt;strong&gt;constant value&lt;/strong&gt;, &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;descriptor&lt;/strong&gt;, 
etc.).  Below is the output of the current class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x000002af&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;af&lt;/span&gt;
&lt;span class="nt"&gt;WARNING&lt;/span&gt; &lt;span class="nt"&gt;Analysis&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;00000312&lt;/span&gt; &lt;span class="nt"&gt;Incorrect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Code&lt;/span&gt; &lt;span class="nt"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;0x2e&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;Function&lt;/span&gt; &lt;span class="nt"&gt;size&lt;/span&gt; &lt;span class="nt"&gt;reported&lt;/span&gt; &lt;span class="nt"&gt;0x2d&lt;/span&gt;
&lt;span class="nt"&gt;Deadcode&lt;/span&gt; &lt;span class="nt"&gt;detected&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;setting&lt;/span&gt; &lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="nt"&gt;length&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;0x2e&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x000002af&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;0x2af&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;java&lt;/span&gt; &lt;span class="nt"&gt;lcr&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="nt"&gt;0x2b0&lt;/span&gt; &lt;span class="nt"&gt;call&lt;/span&gt; &lt;span class="nt"&gt;special&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;FUNCTION&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="nt"&gt;V&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x000002af&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;0x2da&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;java&lt;/span&gt; &lt;span class="nt"&gt;lcr&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="nt"&gt;0x2de&lt;/span&gt; &lt;span class="nt"&gt;call&lt;/span&gt; &lt;span class="nt"&gt;special&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;FUNCTION&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;sun&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;misc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;BASE64Encoder&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="nt"&gt;V&lt;/span&gt;
&lt;span class="nt"&gt;0x2e2&lt;/span&gt; &lt;span class="nt"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;FIELD&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;z&lt;/span&gt;
&lt;span class="nt"&gt;0x2e5&lt;/span&gt; &lt;span class="nt"&gt;call&lt;/span&gt; &lt;span class="nt"&gt;virtual&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;FUNCTION&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;getBytes&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;;)&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;
&lt;span class="mh"&gt;0x2e8&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FUNCTION&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;misc&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;BASE64Encoder.encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;Ljava&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x000002da&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;0x312&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;java&lt;/span&gt; &lt;span class="nt"&gt;lcr&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="nt"&gt;0x312&lt;/span&gt; &lt;span class="nt"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;FIELD&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Z&lt;/span&gt; &lt;span class="nt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;a&lt;/span&gt;
&lt;span class="nt"&gt;0x31e&lt;/span&gt; &lt;span class="nt"&gt;call&lt;/span&gt; &lt;span class="nt"&gt;special&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;FUNCTION&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;sun&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;misc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;BASE64Decoder&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="nt"&gt;V&lt;/span&gt;
&lt;span class="nt"&gt;0x322&lt;/span&gt; &lt;span class="nt"&gt;call&lt;/span&gt; &lt;span class="nt"&gt;virtual&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;FUNCTION&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;sun&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;misc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;BASE64Decoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;decodeBuffer&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;;)&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;
&lt;span class="mh"&gt;0x325&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FUNCTION&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;String.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;
&lt;span class="mh"&gt;0x328&lt;/span&gt; &lt;span class="nx"&gt;read&lt;/span&gt; &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;FIELD&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;a.i&lt;/span&gt;
&lt;span class="mh"&gt;0x33c&lt;/span&gt; &lt;span class="nx"&gt;write&lt;/span&gt; &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;FIELD&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Z&lt;/span&gt; &lt;span class="nx"&gt;c.a&lt;/span&gt;
&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000312&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;0x3ab&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;java&lt;/span&gt; &lt;span class="nt"&gt;lcr&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="nt"&gt;0x3ab&lt;/span&gt; &lt;span class="nt"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;constant&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;String&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;\&lt;/span&gt;&lt;span class="nt"&gt;x05rW&lt;/span&gt;
&lt;span class="nt"&gt;0x3b9&lt;/span&gt; &lt;span class="nt"&gt;call&lt;/span&gt; &lt;span class="nt"&gt;virtual&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;FUNCTION&lt;/span&gt; &lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toCharArray&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;
&lt;span class="mh"&gt;0x41c&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FUNCTION&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;String.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;
&lt;span class="mh"&gt;0x41f&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FUNCTION&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;String.intern&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nx"&gt;Ljava&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mh"&gt;0x3b2&lt;/span&gt; &lt;span class="nx"&gt;write&lt;/span&gt; &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;FIELD&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ljava&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c.z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Looking at a Method Exception Handling Table&lt;/h3&gt;
&lt;p&gt;On some occassions, an analyst might be interested in looking at the 
exception handler table for a particular method.  This table basically
holds the span of code covered by an exception with &lt;strong&gt;start&lt;/strong&gt; and &lt;strong&gt;end&lt;/strong&gt;, 
and then has a pointer to the code that will handle the exception.  The
exception is specified with a reference back into the Constant Pool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x00000312]&amp;gt; java exc 0x312
 Exception table for b (2 entries) @ 0x312:
        Catch Type: 49, java/lang/NumberFormatException @ 0x348
                Start PC: (0x1c) 0x32e @ 0x342
                End PC: (0x28) 0x33a 0x344
                Handler PC: (0x28) 0x33a 0x346
        Catch Type: 49, java/lang/NumberFormatException @ 0x350
                Start PC: (0x4) 0x316 @ 0x34a
                End PC: (0x20) 0x332 0x34c
                Handler PC: (0x23) 0x335 0x34e
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Java Constant Pool&lt;/h3&gt;
&lt;p&gt;One of the major benefits of Java is the separation of code and data.  There are
several different sections in the the Java class file which include the class 
information.  One of the most important sections is the Constant Pool.&lt;br&gt;
The &lt;strong&gt;java resolve_cp&lt;/strong&gt; will give us the power to print all the information 
related to a specific entry, dump all the objects, or print information related
to its address or type.  The most information intensive command switch is 
&lt;strong&gt;java resolv_cp d&lt;/strong&gt;, which dumps the entire contents of the Constant Pool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x000002af]&amp;gt; java resolve_cp d
String ConstantPool Type (1)    Offset: 0x0000000a  String Index = 29
ClassRef ConstantPool Type (2)  Offset: 0x0000000d  Name Index = 34
ClassRef ConstantPool Type (3)  Offset: 0x00000010  Name Index = 35
ClassRef ConstantPool Type (4)  Offset: 0x00000013  Name Index = 36
ClassRef ConstantPool Type (5)  Offset: 0x00000016  Name Index = 37
ClassRef ConstantPool Type (6)  Offset: 0x00000019  Name Index = 38
MethodRef ConstantPool Type (7)     Offset: 0x0000001c  Class Index = 2
    Name and type Index = 14
MethodRef ConstantPool Type (8)     Offset: 0x00000021  Class Index = 3
    Name and type Index = 15
MethodRef ConstantPool Type (9)     Offset: 0x00000026  Class Index = 3
    Name and type Index = 18
MethodRef ConstantPool Type (10)    Offset: 0x0000002b  Class Index = 5
    Name and type Index = 14
MethodRef ConstantPool Type (11)    Offset: 0x00000030  Class Index = 5
    Name and type Index = 16
MethodRef ConstantPool Type (12)    Offset: 0x00000035  Class Index = 6
    Name and type Index = 14
MethodRef ConstantPool Type (13)    Offset: 0x0000003a  Class Index = 6
    Name and type Index = 17
Name_And_Type ConstantPool Type (14)    Offset: 0x0000003f  name_idx = (24)
    descriptor_idx = (19)
Name_And_Type ConstantPool Type (15)    Offset: 0x00000044  name_idx = (24)
    descriptor_idx = (23)
Name_And_Type ConstantPool Type (16)    Offset: 0x00000049  name_idx = (31)
    descriptor_idx = (21)
Name_And_Type ConstantPool Type (17)    Offset: 0x0000004e  name_idx = (32)
    descriptor_idx = (22)
Name_And_Type ConstantPool Type (18)    Offset: 0x00000053  name_idx = (33)
    descriptor_idx = (21)
UTF8 ConstantPool Type (19)     Offset: 0x00000058  length = 3
    utf8 = ()V
UTF8 ConstantPool Type (20)     Offset: 0x0000005e  length = 38
    utf8 = (Ljava/lang/String;)Ljava/lang/String;
UTF8 ConstantPool Type (21)     Offset: 0x00000087  length = 22
    utf8 = (Ljava/lang/String;)[B
UTF8 ConstantPool Type (22)     Offset: 0x000000a0  length = 22
    utf8 = ([B)Ljava/lang/String;
UTF8 ConstantPool Type (23)     Offset: 0x000000b9  length = 5
    utf8 = ([B)V
UTF8 ConstantPool Type (24)     Offset: 0x000000c1  length = 6
    utf8 = &amp;lt;init&amp;gt;
&amp;lt;snip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As previously mentioned, this is alot of output to handle, so 
there is another command that just provides an overview of the 
CP Object is &lt;strong&gt;java resolv_cp g&lt;/strong&gt;, which provides the objects 
&lt;em&gt;index&lt;/em&gt; value in the array, the &lt;em&gt;type&lt;/em&gt; (on the RHS of the equal sign), 
and the &lt;em&gt;offset&lt;/em&gt;.  Note that the CP Object at &lt;strong&gt;index = 0&lt;/strong&gt; is 
always considered a null type.  Below is the output
of the summarized CP Object information.  After executing this 
command it can then be possible to query a specific index to for 
more information like its value. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[[0x000002af]&amp;gt; java resolve_cp g
CP_OBJ Type 1 =  String @ 0xa
CP_OBJ Type 2 =  Class @ 0xd
CP_OBJ Type 3 =  Class @ 0x10
CP_OBJ Type 4 =  Class @ 0x13
CP_OBJ Type 5 =  Class @ 0x16
CP_OBJ Type 6 =  Class @ 0x19
CP_OBJ Type 7 =  MethodRef @ 0x1c
CP_OBJ Type 8 =  MethodRef @ 0x21
CP_OBJ Type 9 =  MethodRef @ 0x26
CP_OBJ Type 10 =  MethodRef @ 0x2b
CP_OBJ Type 11 =  MethodRef @ 0x30
CP_OBJ Type 12 =  MethodRef @ 0x35
CP_OBJ Type 13 =  MethodRef @ 0x3a
CP_OBJ Type 14 =  NameAndType @ 0x3f
CP_OBJ Type 15 =  NameAndType @ 0x44
CP_OBJ Type 16 =  NameAndType @ 0x49
CP_OBJ Type 17 =  NameAndType @ 0x4e
CP_OBJ Type 18 =  NameAndType @ 0x53
CP_OBJ Type 19 =  Utf8 @ 0x58
CP_OBJ Type 20 =  Utf8 @ 0x5e
CP_OBJ Type 21 =  Utf8 @ 0x87
CP_OBJ Type 22 =  Utf8 @ 0xa0
CP_OBJ Type 23 =  Utf8 @ 0xb9
CP_OBJ Type 24 =  Utf8 @ 0xc1
&amp;lt;snip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below are some examples of the &lt;strong&gt;summary&lt;/strong&gt;, &lt;strong&gt;type&lt;/strong&gt;, and &lt;strong&gt;address&lt;/strong&gt; switches.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x00000312]&amp;gt; java resolve_cp s 10
MethodRef ConstantPool Type (10)        Offset: 0x0000002b      Class Index = 5
        Name and type Index = 14
[0x00000312]&amp;gt; java resolve_cp t 10
MethodRef
[0x00000312]&amp;gt; java resolve_cp a 10
0x2b
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Looking for Specific Values in the Constant Pool&lt;/h3&gt;
&lt;p&gt;Under some circumstances it might be necessary to look specific
values in the Constant Pool. For
instance, if an analyst is looking for a specific value like
&lt;strong&gt;java/lang/String&lt;/strong&gt;, then an analyst can use the 
&lt;strong&gt;java find_cp_value&lt;/strong&gt;.  Currently the whole value need to 
be a correct match, but this is still a good way to look for 
unique strings in the class file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x00000312]&amp;gt; java find_cp_value s java/lang/String
Offset: 0x13b idx: 35
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The objective of this post was to walk through the Radare features
that allow for the examination of code artifacts in a Java class file.
Specifically, we introduced tools that can be used to dump the contents of
a class file's CP pool and extract pertinent information from a method. In 
some of the follow-on posts, techniques that can be used for &lt;em&gt;hooking&lt;/em&gt;
Java methods will be explained during the static analysis of the class,
and it allows for the interception of the normal execution such that
a class, or its fields and/or methods can be examined at run-time.  The 
technique is akin to Aspect Oriented Programming, but it does not require
decompilation to source code.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</content><category term="radare"></category><category term="hacking"></category><category term="reverse engineering"></category><category term="java"></category><category term="coding"></category><category term="frameworks"></category></entry><entry><title>Introduction to Radare Java Reverse Engineering</title><link href="http://deeso.github.io/posts/2014/04/radare-java-intro/" rel="alternate"></link><published>2014-04-09T00:00:00-05:00</published><updated>2014-04-09T00:00:00-05:00</updated><author><name>Adam Pridgen</name></author><id>tag:deeso.github.io,2014-04-09:/posts/2014/04/radare-java-intro/</id><summary type="html">&lt;p&gt;This post will be one of several tutorials on how to use Radare to reverse engineer Java class files and JAR files.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;0. Introduction&lt;/h2&gt;
&lt;p&gt;Radare is a reverse engineering framework that was built to support a command line hacker's needs. The frame work supports a number of different architectures and binary formats, which range from esoteric languages like BrainFuck to more common binary formats like MS-DOS Portable Executables (PE) or the Executable Linker Format (ELF).  In the past Radare has had limited support for Java reverse engineering, but this support provided only a minimal amount of information like disassembly, symbols, and import information.  The Java support has recently been updated and set of new features were added to Radare to help facilitate the analysis of Java class and Java Archive (JAR) file formats.&lt;/p&gt;
&lt;p&gt;The focus of this post is to introduce some of these new features in addition to providing a basic walk-through for using Radare as a reverse engineering tool againt a ZIP archive and Java class files.  Typically, Java can be decompiled using tools like JD-GUI, JAD, JODE, CFR, etc., but these tools run into limitations when they are used against malicious or intentionally obfuscated code.  The purpose of these Radare extensions is to give malware analysts and reverse engineers a set of tools that can be used  to analyze Java based malware.  &lt;/p&gt;
&lt;p&gt;In general, Java malware is fairly easy to identify and classify based on the code, import libraries, and the methods used by those imports, but when an analyst is asked to enumerate the functionality or explain what it does, they could be left in the dark.  Before the commencement of this project, there were a limited set of tools and those tools were typically written in Java.  Its not to say tools written in Java are less effective, but rather these tools take advantage of implicit assumptions that are implicit if the code comes from a considerate compiler and is not obfuscated.&lt;/p&gt;
&lt;p&gt;For example, I found that that the &lt;strong&gt;SYNTHETIC&lt;/strong&gt; flags or attributes in methods, fields, or classes code or other artifacts could be used to hide artifacts from an analyst.  This particular case arises because the &lt;strong&gt;SYNTHETIC&lt;/strong&gt; attribute is used to indicate compiler generated code, and a decompiler or other analysis tool might assume this is an artifact is only for a compiler.  In the case of JD-GUI, if a method is marked with the &lt;strong&gt;SYNTHETIC&lt;/strong&gt; flag, the code will not be decompiled and displayed to the user.  This means that a smart malware author could conceal functionality in plain sight.  CFR actually decompiled this and presented it to the user.  This was verified by setting the &lt;strong&gt;SYNTHETIC&lt;/strong&gt; flags on a method in a Java class file, and then then the method was decompiled with both JD-GUI and CFR.&lt;/p&gt;
&lt;p&gt;The remainder of this post will provide a basic introduction to Radare, and the coming days there will be some additional posts about the Java extensions and how they can be used to help analyze Java malware.  The first two sections will talk about setting up the environment.  The remainder of the post will focus on how to enumerate, analyse, and extract files from a ZIP archives.  The last section will discuss how to move data from files to archives and archive files to disk with the yank command.&lt;/p&gt;
&lt;h2&gt;1. Getting started&lt;/h2&gt;
&lt;p&gt;Radare can be compiled from source, or if you want to use a clean environment, you can set up a docker image.  If you get radare from source, it can be retrieved from github.  If you want to go the docker route, simply install Docker and perform the following commands:&lt;/p&gt;
&lt;p&gt;Initialize the Docker and run r2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat radare2.docker &amp;gt; Dockerfile
$ docker build -t r2/radare2 .
$ docker run -t  -i r2/radare2  /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;radare2.docker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;using&lt;/span&gt; &lt;span class="nt"&gt;phusion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;baseimage&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;base&lt;/span&gt; &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; 
&lt;span class="nt"&gt;FROM&lt;/span&gt; &lt;span class="nt"&gt;phusion&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;baseimage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;9&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Set&lt;/span&gt; &lt;span class="nt"&gt;correct&lt;/span&gt; &lt;span class="nt"&gt;environment&lt;/span&gt; &lt;span class="nt"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;ENV&lt;/span&gt; &lt;span class="nt"&gt;HOME&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;root&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Regenerate&lt;/span&gt; &lt;span class="nt"&gt;SSH&lt;/span&gt; &lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="nt"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;baseimage-docker&lt;/span&gt; &lt;span class="nt"&gt;does&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;contain&lt;/span&gt; &lt;span class="nt"&gt;any&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;my_init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;00_regen_ssh_host_keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sh&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Use&lt;/span&gt; &lt;span class="nt"&gt;baseimage-docker&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;init&lt;/span&gt; &lt;span class="nt"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;CMD&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sbin/my_init&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;create&lt;/span&gt; &lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="nt"&gt;directory&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;packages&lt;/span&gt; &lt;span class="nt"&gt;required&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;compile&lt;/span&gt; &lt;span class="nt"&gt;vala&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;radare2&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;apt-get&lt;/span&gt; &lt;span class="nt"&gt;update&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;apt-get&lt;/span&gt; &lt;span class="nt"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;software-properties-common&lt;/span&gt; &lt;span class="nt"&gt;python-all-dev&lt;/span&gt; &lt;span class="nt"&gt;wget&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;apt-get&lt;/span&gt; &lt;span class="nt"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;swig&lt;/span&gt; &lt;span class="nt"&gt;flex&lt;/span&gt; &lt;span class="nt"&gt;bison&lt;/span&gt; &lt;span class="nt"&gt;git&lt;/span&gt; &lt;span class="nt"&gt;gcc&lt;/span&gt; &lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nt"&gt;make&lt;/span&gt; &lt;span class="nt"&gt;pkg-config&lt;/span&gt; &lt;span class="nt"&gt;glib-2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;apt-get&lt;/span&gt; &lt;span class="nt"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;python-gobject-dev&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;compile&lt;/span&gt; &lt;span class="nt"&gt;vala&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;wget&lt;/span&gt; &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;download&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gnome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;sources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;vala&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;24&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;vala-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;24&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;xz&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-Jxf&lt;/span&gt; &lt;span class="nt"&gt;vala-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;24&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;xz&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;vala-0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;24&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="nt"&gt;configure&lt;/span&gt; &lt;span class="nt"&gt;--prefix&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="nt"&gt;usr&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;make&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;make&lt;/span&gt; &lt;span class="nt"&gt;install&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;compile&lt;/span&gt; &lt;span class="nt"&gt;radare&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;git&lt;/span&gt; &lt;span class="nt"&gt;clone&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;radare&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;radare2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;git&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;cd&lt;/span&gt; &lt;span class="nt"&gt;radare2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="nt"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sh&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Clean&lt;/span&gt; &lt;span class="nt"&gt;up&lt;/span&gt; &lt;span class="nt"&gt;APT&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;RUN&lt;/span&gt; &lt;span class="nt"&gt;apt-get&lt;/span&gt; &lt;span class="nt"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. Creating the example file&lt;/h2&gt;
&lt;p&gt;Lets start by writing a new file to disk using a hexlified string.  The below example will open an empty file and then write all the bytes to example.zip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ zip example.zip anypkg/Attacker.class anypkg/BlyahaMuha.class
$ rax2 -S &amp;lt; example.zip &amp;gt; data.hex
$ cat data.hex
504b0304140000000800ce9a5242390493e76a05000&amp;lt;truncated&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open an empty archive and write a hexlified string with &lt;strong&gt;wx&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ r2 -w example.zip
&lt;span class="o"&gt;[&lt;/span&gt;0x00000000&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt; wx 504b0304140000000800dd7c7f44195f7fd7f2020000ef0400003a001c0072657365617263685f646174612f6578706572696d656e742f6465636f6d70696c65722f64756d7065645f6a61725f6465632f632e636c617373555409000361d2395392c43e5375780b000104e803000004e8030000ad52cd4f135110ff3dbadb6dcb0205f9d002f2a5d8166c0501452ac216488ca02628849664b32c0b2ec2962c8b112f26c69b9ebce195c3269ef8484a2209dcfda35ce76df988c2d1cdbe79f37e33f3667ef3e6d7ef9fc7007a311142b38476091d126e49b82da1338232544610401517351188fc28221a41906b4154cbb88e6b5c34c868419d8c56d4cb68431d43209e9861e88c4fae68efb4f4aa662da7a71ddbb4968712972186faab1cf30a37e4952b23446ea014c18c6999ce30297a8abb3108d9c2a2c15035695ac6f3cdb505c37ea52dac1212992e6cdaba3161f28328dab3d57906b6c0202f1a3ac5289b4b4b864d371996ee5f115a361c65cb313618a21725bc58583174e72fa854155da653c51b9b567acddcd0d3cae8f4f840df987fb77dd9306e9d1ac2b96753fda9fed4e038dd4004584e461c8930042425c465a49026d4a4f5348c6edc95d0cbd07291bec472a260af69cef87bdd5877cc8245de1f186aaeea5d28a3affa5d93f1000f19ca9d42f68d668fdab6b645fd8b27f259fee603fc694badce266638f248c6309e50874ccb316c4a511bbfe271b8e76319f7d1c7298c32544c3b9afe764a5bf71f4202f12ccb676950049a31d00a73bea4c57810ed02181f2d92313a35d3ce6817938790f64861682419f441c90fae3d754d526a8ed61c2138770839b90fa588701115bbffc44528eee679dc171a6c5e4a6a1f5d992304e68e20527c245944f92142fbb8b78ddac66dc82e8493800bf1443840d72ec53451f6387aa8e45674d05e769e434025b2a4a711f4c8542621403c24f48c90963ddd3dcedfb7f852218110facfb83385cae4e57eac6151cf45f8008a0b472d6270ee580d0ca93961075373b1f9be5868fd07f9f5a0f405fcbe01edb4eed0ea8ebe74511bed745115ad76118966884454fff4edf5673035f71da179d5f58ed45c6cc73ba006e4d443648a185167d559d7fb5aea3a67b307d9a3a6339f0a952f9e11f0882ea10146f898c79f8c26c73fd04fd6360e04cf014284ff84f8a9a40b84a0aa8b521ac8dee44fd98d3f504b01021e03140000000800dd7c7f44195f7fd7f2020000ef0400003a0018000000000000000000a4810000000072657365617263685f646174612f6578706572696d656e742f6465636f6d70696c65722f64756d7065645f6a61725f6465632f632e636c617373555405000361d2395375780b000104e803000004e8030000504b0506000000000100010080000000660300000000
&lt;span class="o"&gt;[&lt;/span&gt;0x00000000&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt; q
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3. Enumerating Files in the Zip&lt;/h2&gt;
&lt;p&gt;List the files in the example by opening the archive with the "&lt;strong&gt;zip://&lt;/strong&gt;" uri.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ r2 zip://example.zip
&lt;span class="m"&gt;0&lt;/span&gt; anypkg/Attacker.class
&lt;span class="m"&gt;1&lt;/span&gt; anypkg/BlyahaMuha.class
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opening by index:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ r2 zip://example.zip::0
&lt;span class="o"&gt;[&lt;/span&gt;0x00000690&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opening by path:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ r2 zip://example.zip//anypkg/Attacker.class
&lt;span class="o"&gt;[&lt;/span&gt;0x00000690&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. Enumerating Java Class File Information&lt;/h2&gt;
&lt;p&gt;Radare provides some really good informational commands that are typically used for the basic file information, if the developer implements them.  For Java, a large number of the basic information is implemented.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;if&lt;/strong&gt; or &lt;strong&gt;ijf&lt;/strong&gt;: list the the information related to the class file in standard or JSON output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ii&lt;/strong&gt; or &lt;strong&gt;iji&lt;/strong&gt;: list the imported classes methods and fields used in the class file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;il&lt;/strong&gt; or &lt;strong&gt;ijl&lt;/strong&gt;: list all of classes/libraries used by the class file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ic&lt;/strong&gt; or &lt;strong&gt;ijc&lt;/strong&gt;: list the class hierarchy for the current class file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iz&lt;/strong&gt; or &lt;strong&gt;ijZ&lt;/strong&gt;: list the all the strings in the class file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iS&lt;/strong&gt; or &lt;strong&gt;ijS&lt;/strong&gt;: show where where the CP array, fields array, methods array, and attributes array begins.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Radare Java analysis contains several different features that will be covered in the future.  In general, the extension commands can be run with "&lt;strong&gt;java &amp;lt;&lt;em&gt;command&lt;/em&gt;&amp;gt;&lt;/strong&gt;" like "&lt;strong&gt;java resolve_cp d&lt;/strong&gt;".  The "&lt;strong&gt;resolve_cp&lt;/strong&gt;" command is used to resolve or identify Constant Pool objects in the class file by their index.  Below the &lt;strong&gt;java resolve_cp d&lt;/strong&gt; will dump all the CP objects in the class file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x00000690]&amp;gt; java resolve_cp d
MethodRef ConstantPool Type (1)         Offset: 0x0000000a      Class Index = 39
        Name and type Index = 87
MethodRef ConstantPool Type (2)         Offset: 0x0000000f      Class Index = 39
        Name and type Index = 88
String ConstantPool Type (3)    Offset: 0x00000014      String Index = 89
MethodRef ConstantPool Type (4)         Offset: 0x00000017      Class Index = 38
        Name and type Index = 90
FieldRef ConstantPool Type (5)  Offset: 0x0000001c      Class Index = 38
        Name and type Index = 91
ClassRef ConstantPool Type (6)  Offset: 0x00000021      Name Index = 92
MethodRef ConstantPool Type (7)         Offset: 0x00000024      Class Index = 6
&amp;lt;snip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information on the extensions, checkout "java help".  Note some of the commands will not work if analysis is not performed.  Before discussing the code analysis, lets briefly cover some additional information that is provided when Radare reports the class files's sections and symbols.  JVM class files are very good about separating code and data while including alot of meta-information that can be used for reversing or modifying the class file without lifting it back to source (e.g. decompiling).  In the symbols list (e.g. is), the descriptor notes whether a field or method are &lt;strong&gt;FUNC&lt;/strong&gt;, &lt;strong&gt;FUNC_META&lt;/strong&gt;, &lt;strong&gt;FIELD&lt;/strong&gt;, or &lt;strong&gt;FIELD_META&lt;/strong&gt;.  In these cases, the &lt;strong&gt;*_META&lt;/strong&gt; points to the start of the meta-information, and &lt;strong&gt;FUNC&lt;/strong&gt; will point to the actual code.  In the case of &lt;strong&gt;FIELD&lt;/strong&gt; and &lt;strong&gt;FIELD_META&lt;/strong&gt;, they will point to the same location because the &lt;strong&gt;FIELD&lt;/strong&gt; is used to more or less to hold values, which only exist if the value is a constant.&lt;/p&gt;
&lt;p&gt;Below shows the output of the &lt;strong&gt;is&lt;/strong&gt;, which will output the symbol information for the class file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x00000690]&amp;gt; is
[Symbols]
addr=0x00000690 off=0x00000690 ord=000 fwd=NONE sz=5 bind= type=FUNC name=_init_
addr=0x0000067a off=0x0000067a ord=000 fwd=NONE sz=61 bind=java/applet/Applet type=FUNC_META name=mmeta__init_
addr=0x000006cd off=0x000006cd ord=001 fwd=NONE sz=122 bind= type=FUNC name=init
addr=0x000006b7 off=0x000006b7 ord=001 fwd=NONE sz=361 bind=java/applet/Applet type=FUNC_META name=mmeta_init
addr=0x00000836 off=0x00000836 ord=002 fwd=NONE sz=105 bind=LOCAL type=FUNC name=createMe
addr=0x00000820 off=0x00000820 ord=002 fwd=NONE sz=295 bind=anypkg/Attacker type=FUNC_META name=mmeta_createMe
addr=0x0000095d off=0x0000095d ord=003 fwd=NONE sz=4 bind= type=FUNC name=getPath
addr=0x00000947 off=0x00000947 ord=003 fwd=NONE sz=42 bind=anypkg/Attacker type=FUNC_META name=mmeta_getPath
addr=0x00000987 off=0x00000987 ord=004 fwd=NONE sz=1 bind= type=FUNC name=main
addr=0x00000971 off=0x00000971 ord=004 fwd=NONE sz=57 bind=anypkg/Attacker type=FUNC_META name=mmeta_main
addr=0x000009c0 off=0x000009c0 ord=005 fwd=NONE sz=6 bind= type=FUNC name=_clinit_
addr=0x000009aa off=0x000009aa ord=005 fwd=NONE sz=44 bind=anypkg/Attacker type=FUNC_META name=mmeta__clinit_
addr=0x00000670 off=0x00000670 ord=000 fwd=NONE sz=8 bind= type=FIELD name=_lastParam
addr=0x00000670 off=0x00000670 ord=000 fwd=NONE sz=8 bind=anypkg/Attacker type=FIELD_META name=mmeta__lastParam

14 symbols
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the case of the sections, the sections of the file are broken down in the following manner:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;constant_pool:&lt;/strong&gt; Constant Pool Section (see JVM/class file spec.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fields:&lt;/strong&gt; Start of the Actual Fields Array, (see JVM/class file spec.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;attrs.&amp;lt;&lt;em&gt;field_name&lt;/em&gt;&amp;gt;:&lt;/strong&gt; Start of the attributes array for the given field, (see JVM/class file spec.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methods:&lt;/strong&gt; Start of the Actual Methods Array, (see JVM/class file spec.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;attrs.&amp;lt;&lt;em&gt;method_name&lt;/em&gt;&amp;gt;:&lt;/strong&gt; Start of the attributes array for the given method, (see JVM/class file spec.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below are the sections reported by the &lt;strong&gt;iS&lt;/strong&gt; command.  Note that the &lt;strong&gt;attr._lastParam&lt;/strong&gt; in the &lt;strong&gt;iS&lt;/strong&gt; does not have a corresponding section, because there is no attribute array for this field.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x00000690]&amp;gt; iS
[Sections]
idx=00 addr=0x0000066c off=0x0000066c sz=1630 vsz=0 perm=---- name=constant_pool
idx=01 addr=0x0000066e off=0x0000066e sz=10 vsz=0 perm=---- name=fields
idx=02 addr=0x00000678 off=0x00000678 sz=862 vsz=0 perm=---- name=methods
idx=03 addr=0x00000682 off=0x00000682 sz=69 vsz=0 perm=---- name=attrs._init_
idx=04 addr=0x000006bf off=0x000006bf sz=369 vsz=0 perm=---- name=attrs.init
idx=05 addr=0x00000828 off=0x00000828 sz=303 vsz=0 perm=---- name=attrs.createMe
idx=06 addr=0x0000094f off=0x0000094f sz=50 vsz=0 perm=---- name=attrs.getPath
idx=07 addr=0x00000979 off=0x00000979 sz=65 vsz=0 perm=---- name=attrs.main
idx=08 addr=0x000009b2 off=0x000009b2 sz=52 vsz=0 perm=---- name=attrs._clinit_
idx=09 addr=0x000009d6 off=0x000009d6 sz=10 vsz=0 perm=---- name=attributes

10 sections
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5. Yanking Around Files&lt;/h2&gt;
&lt;p&gt;Some other neat features that were added to Radare as part of this project improved the file yanking capability.  Yanking, as the name implies, is the copying and pasting of bytes into a buffer or file.  This feature is enhanced by allowing files to yanked into or out of an archive.  For example, if an analyst is reversing a Java application, they might want to inject a class file into the archive or extract only a single file from the archive.  This means if a firmware images could also be manipulated in this manner, if the archive is implemented in the IO layer of Radare.&lt;/p&gt;
&lt;p&gt;Examples below will demonstrate how to yank a file from an archive, print the disassembly, and then write the file to disk.  Another example will show how to yank code out of a Java function, and then paste this code into a file for further analysis.  A third example will show a file being added from the file system into the ZIP archive.&lt;/p&gt;
&lt;p&gt;Before the demonstration, here is a quick summary of the commands used here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;yfa:&lt;/strong&gt; yank the entire file into the yank buffer using the IO layer to retrieve the file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yx:&lt;/strong&gt; print the yanked buffer as hex shown with the offset, the hexlified-bytes, and then the bytes themselves.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yy:&lt;/strong&gt; paste the yank buffer to the given address or current location&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;y:&lt;/strong&gt; print a summary of the yank buffer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wen:&lt;/strong&gt; extend the buffer by N-bytes null bytes from the current position&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;!ls -al:&lt;/strong&gt; perform the shell command "&lt;strong&gt;ls -al&lt;/strong&gt;"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;? x- y:&lt;/strong&gt; perform the binary operation x-y and show the result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wt &lt;em&gt;[filename]&lt;/em&gt;:&lt;/strong&gt; write the buffer to disk&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;o- &lt;em&gt;[number]&lt;/em&gt;:&lt;/strong&gt; close the file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;o+ &lt;em&gt;[filename]&lt;/em&gt;:&lt;/strong&gt; open a file for write mode&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ib:&lt;/strong&gt; reload the bin from the buffer&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Yank the File from Buffer and Write to Disk&lt;/h3&gt;
&lt;p&gt;Below is an example of opening Radare with a small (512 bytes) memory backed buffer.  This buffer will need to be resized with "&lt;strong&gt;wen&lt;/strong&gt;" to accommodate the data from the target file, &lt;strong&gt;anypkg/Attacker.class&lt;/strong&gt;, in the archive.  Then "&lt;strong&gt;yy&lt;/strong&gt;' is used to paste the bytes,  and the "&lt;strong&gt;ib&lt;/strong&gt;" (info buffer) command is used to reload the buffer to detect type of content and load it as a Java class file.  This class file will then be saved to disk with "&lt;strong&gt;wt&lt;/strong&gt;".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;r2&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip&lt;/span&gt;
&lt;span class="nx"&gt;Files&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;archive&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;anypkg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Attacker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;anypkg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;BlyahaMuha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;yfa&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip::0; yx&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;  &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="nx"&gt;D&lt;/span&gt;  &lt;span class="nx"&gt;E&lt;/span&gt; &lt;span class="nx"&gt;F&lt;/span&gt;  &lt;span class="mi"&gt;0123456789&lt;/span&gt;&lt;span class="nx"&gt;ABCDEF&lt;/span&gt;
&lt;span class="mh"&gt;0x00000000&lt;/span&gt;  &lt;span class="nx"&gt;cafe&lt;/span&gt; &lt;span class="nx"&gt;babe&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0033&lt;/span&gt; &lt;span class="mi"&gt;0090&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;a00&lt;/span&gt; &lt;span class="mi"&gt;2700&lt;/span&gt; &lt;span class="mi"&gt;570&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;  &lt;span class="p"&gt;.......&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.W.&lt;/span&gt;
&lt;span class="s1"&gt;0x00000010  0027 0058 0800 590a 0026 005a 0900 2600  .&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mh"&gt;0x00000020&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;b07&lt;/span&gt; &lt;span class="mi"&gt;005&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;a00&lt;/span&gt; &lt;span class="mi"&gt;0600&lt;/span&gt; &lt;span class="mi"&gt;5703&lt;/span&gt; &lt;span class="mi"&gt;0001&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="nx"&gt;a0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;a00&lt;/span&gt;  &lt;span class="p"&gt;[..&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="nx"&gt;W&lt;/span&gt;&lt;span class="p"&gt;.......&lt;/span&gt;
&lt;span class="mh"&gt;0x00000030&lt;/span&gt;  &lt;span class="mi"&gt;0600&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nx"&gt;d07&lt;/span&gt; &lt;span class="mi"&gt;005&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;0500&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;0000&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;  &lt;span class="p"&gt;..]..&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;........&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mh"&gt;0x00000040&lt;/span&gt;  &lt;span class="mi"&gt;005&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;0060&lt;/span&gt; &lt;span class="mi"&gt;0700&lt;/span&gt; &lt;span class="mi"&gt;610&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;001&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;0062&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;a00&lt;/span&gt; &lt;span class="mi"&gt;1800&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="sb"&gt;`..a....b....&lt;/span&gt;
&lt;span class="sb"&gt;0x00000050  6307 0046 0a00 2600 6407 0065 0800 6608  c..F..&amp;amp;.d..e..f.&lt;/span&gt;
&lt;span class="sb"&gt;0x00000060  0067 0800 680a 0020 0069 0700 6a07 0039  .g..h.. .i..j..9&lt;/span&gt;
&lt;span class="sb"&gt;0x00000070  0a00 1800 6b07 006c 0a00 6d00 6e07 006f  ....k..l..m.n..o&lt;/span&gt;
&lt;span class="sb"&gt;0x00000080  0a00 1d00 5708 0070 0700 7108 0072 0700  ....W..p..q..r..&lt;/span&gt;
&lt;span class="sb"&gt;0x00000090  730a 0022 0074 0a00 1d00 750a 001d 0076  s..&amp;quot;.t....u....v&lt;/span&gt;
&lt;span class="sb"&gt;0x000000a0  0700 7707 0078 0100 0a5f 6c61 7374 5061  ..w..x..._lastPa&lt;/span&gt;
&lt;span class="sb"&gt;0x000000b0  7261 6d01 0012 4c6a 6176 612f 6c61 6e67  ram...Ljava/lang&lt;/span&gt;
&lt;span class="sb"&gt;0x000000c0  2f53 7472 696e 673b 0100 063c 696e 6974  /String;...&amp;lt;init&lt;/span&gt;
&lt;span class="sb"&gt;&amp;lt;snip&amp;gt;&lt;/span&gt;

&lt;span class="sb"&gt;[0x00000000]&amp;gt; if&lt;/span&gt;
&lt;span class="sb"&gt;file    malloc://512&lt;/span&gt;
&lt;span class="sb"&gt;fd      2946784&lt;/span&gt;
&lt;span class="sb"&gt;size    0x200&lt;/span&gt;
&lt;span class="sb"&gt;mode    rw-&lt;/span&gt;
&lt;span class="sb"&gt;block   0x100&lt;/span&gt;
&lt;span class="sb"&gt;uri     malloc://512&lt;/span&gt;

&lt;span class="sb"&gt;[0x00000000]&amp;gt; y&lt;/span&gt;
&lt;span class="sb"&gt;0xffffffffffffffff 2528 cafebabe0000003300900a002700570a002700580800590a0026005a090026005b&amp;lt;truncated&amp;gt;&lt;/span&gt;

&lt;span class="sb"&gt;[0x00000000]&amp;gt; ? 2528-0x200&lt;/span&gt;
&lt;span class="sb"&gt;2016 0x7e0 03740 1.0K 0000:07e0 2016 11100000 2016.0 0.000000&lt;/span&gt;
&lt;span class="sb"&gt;[0x00000000]&amp;gt; wen 2016; yy; ib&lt;/span&gt;
&lt;span class="sb"&gt;[0x000009c0]&amp;gt; if&lt;/span&gt;
&lt;span class="sb"&gt;file    malloc://512&lt;/span&gt;
&lt;span class="sb"&gt;type    JAVA CLASS&lt;/span&gt;
&lt;span class="sb"&gt;pic     false&lt;/span&gt;
&lt;span class="sb"&gt;has_va  false&lt;/span&gt;
&lt;span class="sb"&gt;root    classprint the disassembly&lt;/span&gt;
&lt;span class="sb"&gt;class   0x3300 0x0000&lt;/span&gt;
&lt;span class="sb"&gt;lang    java&lt;/span&gt;
&lt;span class="sb"&gt;arch    java&lt;/span&gt;
&lt;span class="sb"&gt;bits    32&lt;/span&gt;
&lt;span class="sb"&gt;machine Java VM&lt;/span&gt;
&lt;span class="sb"&gt;os      any&lt;/span&gt;
&lt;span class="sb"&gt;subsys  any&lt;/span&gt;
&lt;span class="sb"&gt;endian  little&lt;/span&gt;
&lt;span class="sb"&gt;strip   false&lt;/span&gt;
&lt;span class="sb"&gt;static  false&lt;/span&gt;
&lt;span class="sb"&gt;linenum true&lt;/span&gt;
&lt;span class="sb"&gt;lsyms   true&lt;/span&gt;
&lt;span class="sb"&gt;relocs  false&lt;/span&gt;
&lt;span class="sb"&gt;rpath   NONE&lt;/span&gt;
&lt;span class="sb"&gt;type    JAVA CLASS&lt;/span&gt;
&lt;span class="sb"&gt;os      any&lt;/span&gt;
&lt;span class="sb"&gt;arch    Java VM&lt;/span&gt;
&lt;span class="sb"&gt;bits    32&lt;/span&gt;
&lt;span class="sb"&gt;endian  little&lt;/span&gt;
&lt;span class="sb"&gt;file    malloc://512&lt;/span&gt;
&lt;span class="sb"&gt;fd      2791744&lt;/span&gt;
&lt;span class="sb"&gt;size    0x9e0&lt;/span&gt;
&lt;span class="sb"&gt;mode    rw-&lt;/span&gt;
&lt;span class="sb"&gt;block   0x100&lt;/span&gt;
&lt;span class="sb"&gt;uri     malloc://512&lt;/span&gt;

&lt;span class="sb"&gt;[0x000009c0]&amp;gt; s sym.anypkg_Attacker.createMe; af; pdf&lt;/span&gt;
&lt;span class="sb"&gt;/ (fcn) sym.anypkg_Attacker.createMe 105&lt;/span&gt;
&lt;span class="sb"&gt;|          0x00000836    bb001d       new java/io/ByteArrayOutputStream &lt;/span&gt;
&lt;span class="sb"&gt;|          0x00000839    59           dup&lt;/span&gt;
&lt;span class="sb"&gt;|          0x0000083a    b7001e       invokespecial java/io/ByteArrayOutputStream/&amp;lt;init&amp;gt;()V&lt;/span&gt;
&lt;span class="sb"&gt;|             0x00000000()&lt;/span&gt;
&lt;span class="sb"&gt;|          0x0000083d    4c           astore_1&lt;/span&gt;
&lt;span class="sb"&gt;|          0x0000083e    01           aconst_null&lt;/span&gt;
&lt;span class="sb"&gt;|          0x0000083f    4d           astore_2&lt;/span&gt;
&lt;span class="sb"&gt;|          0x00000840    130018       ldc_w java/lang/Classprint the disassembly&lt;/span&gt;
&lt;span class="sb"&gt;|          0x00000843    121f         ldc &amp;quot;getReso@urceA@sStream&amp;quot;&lt;/span&gt;
&lt;span class="sb"&gt;&amp;lt;snip&amp;gt;&lt;/span&gt;
&lt;span class="sb"&gt;[0x00000836]&amp;gt; wt Attacker.class&lt;/span&gt;
&lt;span class="sb"&gt;[0x00000836]&amp;gt; !ls -al&lt;/span&gt;
&lt;span class="sb"&gt;total 4&lt;/span&gt;
&lt;span class="sb"&gt;drwxrwxr-x 5 dso dso 4096 Apr  8 20:33 .&lt;/span&gt;
&lt;span class="sb"&gt;drwxrwxr-x 6 dso dso 4096 Nov 21 19:33 ..&lt;/span&gt;
&lt;span class="sb"&gt;-rw-r--r-- 1 dso dso  256 Apr  8 20:33 Attacker.class&lt;/span&gt;
&lt;span class="sb"&gt;-rw-r--r-- 1 dso dso 2104 Apr  8 11:43 example.zip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Yank Some Code From the Archive and Paste to a File&lt;/h3&gt;
&lt;p&gt;Below is an example of how to yank a method from a Java class file, and then paste it into a file for further analysis.  In this example, the &lt;strong&gt;Attacker.class&lt;/strong&gt; will be opened from the JAR file, and analysis will be performed so that we can yank out the &lt;em&gt;createMe&lt;/em&gt; method from this class.  Once the method is yanked, the class file will be closed and a new file &lt;strong&gt;createMe.method&lt;/strong&gt; will be written to the disk.  Then this file will be opened, and the architecture will be set to java.  Afterwards, the assembly will be printed.  This technique can be used to save off interesting code, but note, the CP object reference resolutions will not be extracted with the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="nl"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip//anypkg/Attacker.class&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000690&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anypkg_Attacker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createMe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fcn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anypkg_Attacker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createMe&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000836&lt;/span&gt;    &lt;span class="n"&gt;bb001d&lt;/span&gt;       &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000839&lt;/span&gt;    &lt;span class="mi"&gt;59&lt;/span&gt;           &lt;span class="n"&gt;dup&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000083a&lt;/span&gt;    &lt;span class="n"&gt;b7001e&lt;/span&gt;       &lt;span class="n"&gt;invokespecial&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000083d&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;           &lt;span class="n"&gt;astore_1&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000083e&lt;/span&gt;    &lt;span class="mo"&gt;01&lt;/span&gt;           &lt;span class="n"&gt;aconst_null&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000083f&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;           &lt;span class="n"&gt;astore_2&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000840&lt;/span&gt;    &lt;span class="mi"&gt;130018&lt;/span&gt;       &lt;span class="n"&gt;ldc_w&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000843&lt;/span&gt;    &lt;span class="mf"&gt;121f&lt;/span&gt;         &lt;span class="n"&gt;ldc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;getReso@urceA@sStream&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000845&lt;/span&gt;    &lt;span class="mi"&gt;1215&lt;/span&gt;         &lt;span class="n"&gt;ldc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000847&lt;/span&gt;    &lt;span class="mi"&gt;1216&lt;/span&gt;         &lt;span class="n"&gt;ldc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000849&lt;/span&gt;    &lt;span class="n"&gt;b60017&lt;/span&gt;       &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000084c&lt;/span&gt;    &lt;span class="mo"&gt;04&lt;/span&gt;           &lt;span class="n"&gt;iconst_1&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000084d&lt;/span&gt;    &lt;span class="n"&gt;bd0018&lt;/span&gt;       &lt;span class="n"&gt;anewarray&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000850&lt;/span&gt;    &lt;span class="mi"&gt;59&lt;/span&gt;           &lt;span class="n"&gt;dup&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000851&lt;/span&gt;    &lt;span class="mo"&gt;03&lt;/span&gt;           &lt;span class="n"&gt;iconst_0&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000852&lt;/span&gt;    &lt;span class="mi"&gt;130020&lt;/span&gt;       &lt;span class="n"&gt;ldc_w&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000855&lt;/span&gt;    &lt;span class="mi"&gt;53&lt;/span&gt;           &lt;span class="n"&gt;aastore&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000856&lt;/span&gt;    &lt;span class="n"&gt;b6001a&lt;/span&gt;       &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;getMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;[&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000859&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;           &lt;span class="n"&gt;aload_0&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000085a&lt;/span&gt;    &lt;span class="n"&gt;b6000f&lt;/span&gt;       &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kt"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000085d&lt;/span&gt;    &lt;span class="mo"&gt;04&lt;/span&gt;           &lt;span class="n"&gt;iconst_1&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000085e&lt;/span&gt;    &lt;span class="n"&gt;bd001b&lt;/span&gt;       &lt;span class="n"&gt;anewarray&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000861&lt;/span&gt;    &lt;span class="mi"&gt;59&lt;/span&gt;           &lt;span class="n"&gt;dup&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000862&lt;/span&gt;    &lt;span class="mo"&gt;03&lt;/span&gt;           &lt;span class="n"&gt;iconst_0&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000863&lt;/span&gt;    &lt;span class="mi"&gt;1221&lt;/span&gt;         &lt;span class="n"&gt;ldc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/x/Make@Som@eFun.cla@ss&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000865&lt;/span&gt;    &lt;span class="mi"&gt;1215&lt;/span&gt;         &lt;span class="n"&gt;ldc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000867&lt;/span&gt;    &lt;span class="mi"&gt;1216&lt;/span&gt;         &lt;span class="n"&gt;ldc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000869&lt;/span&gt;    &lt;span class="n"&gt;b60017&lt;/span&gt;       &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CharSequence&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000086c&lt;/span&gt;    &lt;span class="mi"&gt;53&lt;/span&gt;           &lt;span class="n"&gt;aastore&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000086d&lt;/span&gt;    &lt;span class="n"&gt;b6001c&lt;/span&gt;       &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;[&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000870&lt;/span&gt;    &lt;span class="n"&gt;c00022&lt;/span&gt;       &lt;span class="n"&gt;checkcast&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000873&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;           &lt;span class="n"&gt;astore_2&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000874&lt;/span&gt;    &lt;span class="n"&gt;a70004&lt;/span&gt;       &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="mh"&gt;0x0878&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anypkg_Attacker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createMe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mh"&gt;0x00000877&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;           &lt;span class="n"&gt;astore_3&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x00000878&lt;/span&gt;    &lt;span class="mi"&gt;110800&lt;/span&gt;       &lt;span class="n"&gt;sipush&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000087b&lt;/span&gt;    &lt;span class="n"&gt;bc08&lt;/span&gt;         &lt;span class="n"&gt;newarray&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000087d&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;a04&lt;/span&gt;         &lt;span class="n"&gt;astore&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000087f&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;           &lt;span class="n"&gt;aload_2&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000880&lt;/span&gt;    &lt;span class="mi"&gt;1904&lt;/span&gt;         &lt;span class="n"&gt;aload&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000882&lt;/span&gt;    &lt;span class="mo"&gt;03&lt;/span&gt;           &lt;span class="n"&gt;iconst_0&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000883&lt;/span&gt;    &lt;span class="mi"&gt;1904&lt;/span&gt;         &lt;span class="n"&gt;aload&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000885&lt;/span&gt;    &lt;span class="n"&gt;be&lt;/span&gt;           &lt;span class="n"&gt;arraylength&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000886&lt;/span&gt;    &lt;span class="n"&gt;b60023&lt;/span&gt;       &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;BII&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00000889&lt;/span&gt;    &lt;span class="mi"&gt;59&lt;/span&gt;           &lt;span class="n"&gt;dup&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000088a&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;           &lt;span class="n"&gt;istore_3&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000088b&lt;/span&gt;    &lt;span class="mo"&gt;02&lt;/span&gt;           &lt;span class="n"&gt;iconst_m1&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;==&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;0x0000088c&lt;/span&gt;    &lt;span class="mf"&gt;9f&lt;/span&gt;&lt;span class="mo"&gt;000&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;       &lt;span class="n"&gt;if_icmpeq&lt;/span&gt; &lt;span class="mh"&gt;0x089a&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="mh"&gt;0x0000088f&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;           &lt;span class="n"&gt;aload_1&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="mh"&gt;0x00000890&lt;/span&gt;    &lt;span class="mi"&gt;1904&lt;/span&gt;         &lt;span class="n"&gt;aload&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="mh"&gt;0x00000892&lt;/span&gt;    &lt;span class="mo"&gt;03&lt;/span&gt;           &lt;span class="n"&gt;iconst_0&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="mh"&gt;0x00000893&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;           &lt;span class="n"&gt;iload_3&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="mh"&gt;0x00000894&lt;/span&gt;    &lt;span class="n"&gt;b60024&lt;/span&gt;       &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;BII&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="mh"&gt;0x00000897&lt;/span&gt;    &lt;span class="n"&gt;a7ffe8&lt;/span&gt;       &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="mh"&gt;0x087f&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anypkg_Attacker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createMe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x0000089a&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;           &lt;span class="n"&gt;aload_1&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000089b&lt;/span&gt;    &lt;span class="n"&gt;b60025&lt;/span&gt;       &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant_pool&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;          &lt;span class="mh"&gt;0x0000089e&lt;/span&gt;    &lt;span class="n"&gt;b0&lt;/span&gt;           &lt;span class="n"&gt;areturn&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000836&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000836&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;51309&lt;/span&gt; &lt;span class="nl"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip//anypkg/Attacker.class @ 0x0 ; r&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000836&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;51309&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000836&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;createMe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x00000836&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;al&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;drwxrwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;drwxrwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="n"&gt;Nov&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt;  &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="n"&gt;Attacker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt;  &lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="n"&gt;createMe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt; &lt;span class="n"&gt;dso&lt;/span&gt; &lt;span class="mi"&gt;2104&lt;/span&gt; &lt;span class="n"&gt;Apr&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the code will be loaded from the createMe.method and the code will be disassembled with "&lt;strong&gt;pdn&lt;/strong&gt;" (print disassembly of N bytes).  Next, the architecture will be switched to Java and "&lt;strong&gt;pdn&lt;/strong&gt;" will be used again.  Note the pdn is used to disassemble up to the number of bytes passed to it.  In this case, 105 bytes are all that are in createMe.method, so only 105 bytes should be disassembled.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;pdn&lt;/strong&gt; is first executed it is going to print &lt;em&gt;105&lt;/em&gt; instructions from data interpretted as x86 machine code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ r2 createMe.method 
&lt;span class="o"&gt;[&lt;/span&gt;0x00000000&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt; pdn &lt;span class="m"&gt;105&lt;/span&gt;
0x00000000   bb001d59b7 mov ebx, 0xb7591d00
0x00000005         001e add &lt;span class="o"&gt;[&lt;/span&gt;rsi&lt;span class="o"&gt;]&lt;/span&gt;, bl
0x00000007     4c014d13 add &lt;span class="o"&gt;[&lt;/span&gt;rbp+0x13&lt;span class="o"&gt;]&lt;/span&gt;, r9
0x0000000b         &lt;span class="m"&gt;0018&lt;/span&gt; add &lt;span class="o"&gt;[&lt;/span&gt;rax&lt;span class="o"&gt;]&lt;/span&gt;, bl
0x0000000d         121f adc bl, &lt;span class="o"&gt;[&lt;/span&gt;rdi&lt;span class="o"&gt;]&lt;/span&gt;
0x0000000f 12151216b600 adc dl, &lt;span class="o"&gt;[&lt;/span&gt;rip+0xb61612&lt;span class="o"&gt;]&lt;/span&gt;
0x00000015               &lt;span class="m"&gt;17&lt;/span&gt;  &amp;lt;invalid&amp;gt;
0x00000016         04bd add al, 0xbd
0x00000018         &lt;span class="m"&gt;0018&lt;/span&gt; add &lt;span class="o"&gt;[&lt;/span&gt;rax&lt;span class="o"&gt;]&lt;/span&gt;, bl
0x0000001a           &lt;span class="m"&gt;59&lt;/span&gt; pop rcx
0x0000001b         &lt;span class="m"&gt;0313&lt;/span&gt; add edx, &lt;span class="o"&gt;[&lt;/span&gt;rbx&lt;span class="o"&gt;]&lt;/span&gt;
0x0000001d         &lt;span class="m"&gt;0020&lt;/span&gt; add &lt;span class="o"&gt;[&lt;/span&gt;rax&lt;span class="o"&gt;]&lt;/span&gt;, ah
&amp;lt;snip&amp;gt;
0x00000061       a7ffe8 goto 0x0049
0x00000064           2b aload_1
0x00000065       b60025 invokevirtual &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; INVALID CP_OBJ
0x00000068           b0 areturn
&lt;span class="o"&gt;[&lt;/span&gt;0x00000000&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the architecture is switched to Java with &lt;strong&gt;e asm.arch=java&lt;/strong&gt;, &lt;strong&gt;pdn&lt;/strong&gt; prints &lt;em&gt;105&lt;/em&gt; instructions disasembled as JVM bytecode.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0x00000000]&amp;gt; e asm.arch=java; pdn 105
0x00000000       bb001d new (29) INVALID CP_OBJ
0x00000003           59 dup
0x00000004       b7001e invokespecial (30) INVALID CP_OBJ
0x00000007           4c astore_1
0x00000008           01 aconst_null
0x00000009           4d astore_2
&amp;lt;snip&amp;gt;
0x00000055           02 iconst_m1
0x00000056       9f000e if_icmpeq 0x0064
0x00000059           2b aload_1
0x0000005a         1904 aload 4
0x0000005c           03 iconst_0
0x0000005d           1d iload_3
0x0000005e       b60024 invokevirtual (36) INVALID CP_OBJ
0x00000061       a7ffe8 goto 0x0049
0x00000064           2b aload_1
0x00000065       b60025 invokevirtual (37) INVALID CP_OBJ
0x00000068           b0 areturn
[0x00000000]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Yank Some Code into the Archive to a File&lt;/h3&gt;
&lt;p&gt;Below is an example of how to yank a data from a file on disk and then written into a ZIP archive.    In the case of Java, this is a great way to inject class files into an archive (topic of future discussion).  In this case, the sb.class is going to be added to the example.zip archive without having to use the zip command.  Once added to the class, "&lt;strong&gt;ib&lt;/strong&gt;" will be executed to load class file.  Then the radare session is quit, and the file is reloaded from the archive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;r2&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip&lt;/span&gt;

&lt;span class="nx"&gt;Files&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;archive&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;anypkg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Attacker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;anypkg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;BlyahaMuha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;r2&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip//sb.class&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;0000&lt;/span&gt;:&lt;span class="kt"&gt;0000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;yfa&lt;/span&gt; &lt;span class="nx"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;0000&lt;/span&gt;:&lt;span class="kt"&gt;0000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;yy&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;0000&lt;/span&gt;:&lt;span class="kt"&gt;0000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ib&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;0000&lt;/span&gt;:&lt;span class="kt"&gt;1225&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
&lt;span class="nx"&gt;file&lt;/span&gt;    &lt;span class="nx"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt;    &lt;span class="nx"&gt;JAVA&lt;/span&gt; &lt;span class="nx"&gt;CLASS&lt;/span&gt;
&lt;span class="nx"&gt;pic&lt;/span&gt;     &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;has_va&lt;/span&gt;  &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;root&lt;/span&gt;    &lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt;   &lt;span class="mh"&gt;0x3200&lt;/span&gt; &lt;span class="mh"&gt;0x0000&lt;/span&gt;
&lt;span class="nx"&gt;lang&lt;/span&gt;    &lt;span class="nx"&gt;java&lt;/span&gt;
&lt;span class="nx"&gt;arch&lt;/span&gt;    &lt;span class="nx"&gt;java&lt;/span&gt;
&lt;span class="nx"&gt;bits&lt;/span&gt;    &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="nx"&gt;Java&lt;/span&gt; &lt;span class="nx"&gt;VM&lt;/span&gt;
&lt;span class="nx"&gt;os&lt;/span&gt;      &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="nx"&gt;subsys&lt;/span&gt;  &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="nx"&gt;endian&lt;/span&gt;  &lt;span class="nx"&gt;little&lt;/span&gt;
&lt;span class="nx"&gt;strip&lt;/span&gt;   &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="kr"&gt;static&lt;/span&gt;  &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;linenum&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nx"&gt;lsyms&lt;/span&gt;   &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nx"&gt;relocs&lt;/span&gt;  &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;rpath&lt;/span&gt;   &lt;span class="nx"&gt;NONE&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt;    &lt;span class="nx"&gt;JAVA&lt;/span&gt; &lt;span class="nx"&gt;CLASS&lt;/span&gt;
&lt;span class="nx"&gt;os&lt;/span&gt;      &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="nx"&gt;arch&lt;/span&gt;    &lt;span class="nx"&gt;Java&lt;/span&gt; &lt;span class="nx"&gt;VM&lt;/span&gt;
&lt;span class="nx"&gt;bits&lt;/span&gt;    &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="nx"&gt;endian&lt;/span&gt;  &lt;span class="nx"&gt;little&lt;/span&gt;
&lt;span class="nx"&gt;file&lt;/span&gt;    &lt;span class="nx"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="nx"&gt;fd&lt;/span&gt;      &lt;span class="mi"&gt;5031&lt;/span&gt;
&lt;span class="nx"&gt;size&lt;/span&gt;    &lt;span class="mh"&gt;0x28e7&lt;/span&gt;
&lt;span class="nx"&gt;mode&lt;/span&gt;    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="nx"&gt;block&lt;/span&gt;   &lt;span class="mh"&gt;0x100&lt;/span&gt;
&lt;span class="nx"&gt;uri&lt;/span&gt;     &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip//sb.class&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;0000&lt;/span&gt;:&lt;span class="kt"&gt;1225&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;r2&lt;/span&gt; &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip//sb.class&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x0000108c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;af&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt;
&lt;span class="err"&gt;/ (fcn) sym.java_lang_Object._init_ 16&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000108c&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;           &lt;span class="nx"&gt;aload_0&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x0000108d&lt;/span&gt;    &lt;span class="nx"&gt;b7000a&lt;/span&gt;       &lt;span class="nx"&gt;invokespecial&lt;/span&gt; &lt;span class="nx"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00001090&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;           &lt;span class="nx"&gt;aload_0&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00001091&lt;/span&gt;    &lt;span class="nx"&gt;bb000c&lt;/span&gt;       &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;StringBuilder&lt;/span&gt; 
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00001094&lt;/span&gt;    &lt;span class="mi"&gt;59&lt;/span&gt;           &lt;span class="nx"&gt;dup&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00001095&lt;/span&gt;    &lt;span class="nx"&gt;b7000e&lt;/span&gt;       &lt;span class="nx"&gt;invokespecial&lt;/span&gt; &lt;span class="nx"&gt;java&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="mh"&gt;0x00000000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constant_pool&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="mh"&gt;0x00001098&lt;/span&gt;    &lt;span class="nx"&gt;b5000f&lt;/span&gt;       &lt;span class="nx"&gt;putfield&lt;/span&gt; &lt;span class="nx"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;thisSb&lt;/span&gt; &lt;span class="nx"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;          &lt;span class="mh"&gt;0x0000109b&lt;/span&gt;    &lt;span class="nx"&gt;b1&lt;/span&gt;           &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x0000108c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
&lt;span class="nx"&gt;file&lt;/span&gt;    &lt;span class="nx"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt;    &lt;span class="nx"&gt;JAVA&lt;/span&gt; &lt;span class="nx"&gt;CLASS&lt;/span&gt;
&lt;span class="nx"&gt;pic&lt;/span&gt;     &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;has_va&lt;/span&gt;  &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;root&lt;/span&gt;    &lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt;   &lt;span class="mh"&gt;0x3200&lt;/span&gt; &lt;span class="mh"&gt;0x0000&lt;/span&gt;
&lt;span class="nx"&gt;lang&lt;/span&gt;    &lt;span class="nx"&gt;java&lt;/span&gt;
&lt;span class="nx"&gt;arch&lt;/span&gt;    &lt;span class="nx"&gt;java&lt;/span&gt;
&lt;span class="nx"&gt;bits&lt;/span&gt;    &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="nx"&gt;Java&lt;/span&gt; &lt;span class="nx"&gt;VM&lt;/span&gt;
&lt;span class="nx"&gt;os&lt;/span&gt;      &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="nx"&gt;subsys&lt;/span&gt;  &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="nx"&gt;endian&lt;/span&gt;  &lt;span class="nx"&gt;little&lt;/span&gt;
&lt;span class="nx"&gt;strip&lt;/span&gt;   &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="kr"&gt;static&lt;/span&gt;  &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;linenum&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nx"&gt;lsyms&lt;/span&gt;   &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nx"&gt;relocs&lt;/span&gt;  &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="nx"&gt;rpath&lt;/span&gt;   &lt;span class="nx"&gt;NONE&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt;    &lt;span class="nx"&gt;JAVA&lt;/span&gt; &lt;span class="nx"&gt;CLASS&lt;/span&gt;
&lt;span class="nx"&gt;os&lt;/span&gt;      &lt;span class="nx"&gt;any&lt;/span&gt;
&lt;span class="nx"&gt;arch&lt;/span&gt;    &lt;span class="nx"&gt;Java&lt;/span&gt; &lt;span class="nx"&gt;VM&lt;/span&gt;
&lt;span class="nx"&gt;bits&lt;/span&gt;    &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="nx"&gt;endian&lt;/span&gt;  &lt;span class="nx"&gt;little&lt;/span&gt;
&lt;span class="nx"&gt;file&lt;/span&gt;    &lt;span class="nx"&gt;sb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt;
&lt;span class="nx"&gt;fd&lt;/span&gt;      &lt;span class="mi"&gt;53803&lt;/span&gt;
&lt;span class="nx"&gt;size&lt;/span&gt;    &lt;span class="mh"&gt;0x28e7&lt;/span&gt;
&lt;span class="nx"&gt;mode&lt;/span&gt;    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="nx"&gt;block&lt;/span&gt;   &lt;span class="mh"&gt;0x100&lt;/span&gt;
&lt;span class="nx"&gt;uri&lt;/span&gt;     &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.zip//sb.class&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6. Conclusions&lt;/h2&gt;
&lt;p&gt;This concludes the initial post of the radare extensions for Java reverse engineering.  In the next few posts, there will be a more detailed discussion about how to perform in-depth Java reversing and analysis with Radare extensions for Java.&lt;/p&gt;
&lt;p&gt;greetz: pancake, xvilka, zlul (resident fuzzer), jvoisin, maijin&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</content><category term="radare"></category><category term="hacking"></category><category term="reverse engineering"></category><category term="java"></category><category term="coding"></category><category term="frameworks"></category></entry></feed>